// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "SAO": Application Contexts
//
// Command:
// $ go generate

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// GetDraftSubmitTrxContext provides the DraftSubmitTrx get action context.
type GetDraftSubmitTrxContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TrxD  *int
	TrxID string
}

// NewGetDraftSubmitTrxContext parses the incoming request URL and body, performs validations and creates the
// context used by the DraftSubmitTrx controller get action.
func NewGetDraftSubmitTrxContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetDraftSubmitTrxContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetDraftSubmitTrxContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTrxD := req.Params["trxD"]
	if len(paramTrxD) > 0 {
		rawTrxD := paramTrxD[0]
		if trxD, err2 := strconv.Atoi(rawTrxD); err2 == nil {
			tmp2 := trxD
			tmp1 := &tmp2
			rctx.TrxD = tmp1
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("trxD", rawTrxD, "integer"))
		}
	}
	paramTrxID := req.Params["trxID"]
	if len(paramTrxID) > 0 {
		rawTrxID := paramTrxID[0]
		rctx.TrxID = rawTrxID
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetDraftSubmitTrxContext) OKFull(r *ComJossemargtSaoDraftSubmitTransactionFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.draft-submit-transaction+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetDraftSubmitTrxContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetDraftSubmitTrxContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// Gone sends a HTTP response with status code 410.
func (ctx *GetDraftSubmitTrxContext) Gone() error {
	ctx.ResponseData.WriteHeader(410)
	return nil
}

// ShowDraftSubmitTrxContext provides the DraftSubmitTrx show action context.
type ShowDraftSubmitTrxContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowDraftSubmitTrxContext parses the incoming request URL and body, performs validations and creates the
// context used by the DraftSubmitTrx controller show action.
func NewShowDraftSubmitTrxContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowDraftSubmitTrxContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowDraftSubmitTrxContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowDraftSubmitTrxContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *ShowDraftSubmitTrxContext) NotImplemented() error {
	ctx.ResponseData.WriteHeader(501)
	return nil
}

// GetEntrySubmitTrxContext provides the EntrySubmitTrx get action context.
type GetEntrySubmitTrxContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TrxD  *int
	TrxID string
}

// NewGetEntrySubmitTrxContext parses the incoming request URL and body, performs validations and creates the
// context used by the EntrySubmitTrx controller get action.
func NewGetEntrySubmitTrxContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetEntrySubmitTrxContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetEntrySubmitTrxContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTrxD := req.Params["trxD"]
	if len(paramTrxD) > 0 {
		rawTrxD := paramTrxD[0]
		if trxD, err2 := strconv.Atoi(rawTrxD); err2 == nil {
			tmp4 := trxD
			tmp3 := &tmp4
			rctx.TrxD = tmp3
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("trxD", rawTrxD, "integer"))
		}
	}
	paramTrxID := req.Params["trxID"]
	if len(paramTrxID) > 0 {
		rawTrxID := paramTrxID[0]
		rctx.TrxID = rawTrxID
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetEntrySubmitTrxContext) OKFull(r *ComJossemargtSaoEntrySubmitTransactionFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry-submit-transaction+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetEntrySubmitTrxContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetEntrySubmitTrxContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// Gone sends a HTTP response with status code 410.
func (ctx *GetEntrySubmitTrxContext) Gone() error {
	ctx.ResponseData.WriteHeader(410)
	return nil
}

// ShowEntrySubmitTrxContext provides the EntrySubmitTrx show action context.
type ShowEntrySubmitTrxContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowEntrySubmitTrxContext parses the incoming request URL and body, performs validations and creates the
// context used by the EntrySubmitTrx controller show action.
func NewShowEntrySubmitTrxContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowEntrySubmitTrxContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowEntrySubmitTrxContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowEntrySubmitTrxContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *ShowEntrySubmitTrxContext) NotImplemented() error {
	ctx.ResponseData.WriteHeader(501)
	return nil
}

// SubmitEntryActionsContext provides the actions submitEntry action context.
type SubmitEntryActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *EntryPayload
}

// NewSubmitEntryActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller submitEntry action.
func NewSubmitEntryActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*SubmitEntryActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SubmitEntryActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// CreatedFull sends a HTTP response with status code 201.
func (ctx *SubmitEntryActionsContext) CreatedFull(r *ComJossemargtSaoEntrySubmitTransactionFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry-submit-transaction+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SubmitEntryActionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *SubmitEntryActionsContext) NotImplemented() error {
	ctx.ResponseData.WriteHeader(501)
	return nil
}

// SubmitEntryDraftActionsContext provides the actions submitEntryDraft action context.
type SubmitEntryDraftActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *EntryPayload
}

// NewSubmitEntryDraftActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller submitEntryDraft action.
func NewSubmitEntryDraftActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*SubmitEntryDraftActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SubmitEntryDraftActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// CreatedFull sends a HTTP response with status code 201.
func (ctx *SubmitEntryDraftActionsContext) CreatedFull(r *ComJossemargtSaoDraftSubmitTransactionFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.draft-submit-transaction+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SubmitEntryDraftActionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *SubmitEntryDraftActionsContext) NotImplemented() error {
	ctx.ResponseData.WriteHeader(501)
	return nil
}

// SummarizeScoreActionsContext provides the actions summarizeScore action context.
type SummarizeScoreActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contest  *int
	GroupBy  string
	Page     int
	PageSize int
	Sort     string
	Task     *int
	User     *int
}

// NewSummarizeScoreActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller summarizeScore action.
func NewSummarizeScoreActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*SummarizeScoreActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SummarizeScoreActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContest := req.Params["contest"]
	if len(paramContest) > 0 {
		rawContest := paramContest[0]
		if contest, err2 := strconv.Atoi(rawContest); err2 == nil {
			tmp6 := contest
			tmp5 := &tmp6
			rctx.Contest = tmp5
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contest", rawContest, "integer"))
		}
		if rctx.Contest != nil {
			if *rctx.Contest < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`contest`, *rctx.Contest, 0, true))
			}
		}
	}
	paramGroupBy := req.Params["groupBy"]
	if len(paramGroupBy) == 0 {
		rctx.GroupBy = "none"
	} else {
		rawGroupBy := paramGroupBy[0]
		rctx.GroupBy = rawGroupBy
		if !(rctx.GroupBy == "contest" || rctx.GroupBy == "task" || rctx.GroupBy == "user" || rctx.GroupBy == "none") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`groupBy`, rctx.GroupBy, []interface{}{"contest", "task", "user", "none"}))
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 20
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	paramTask := req.Params["task"]
	if len(paramTask) > 0 {
		rawTask := paramTask[0]
		if task, err2 := strconv.Atoi(rawTask); err2 == nil {
			tmp10 := task
			tmp9 := &tmp10
			rctx.Task = tmp9
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("task", rawTask, "integer"))
		}
		if rctx.Task != nil {
			if *rctx.Task < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`task`, *rctx.Task, 0, true))
			}
		}
	}
	paramUser := req.Params["user"]
	if len(paramUser) > 0 {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			tmp12 := user
			tmp11 := &tmp12
			rctx.User = tmp11
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
		if rctx.User != nil {
			if *rctx.User < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`user`, *rctx.User, 0, true))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SummarizeScoreActionsContext) OK(r ComJossemargtSaoScoreSumCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.score-sum+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoScoreSumCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SummarizeScoreActionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *SummarizeScoreActionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *SummarizeScoreActionsContext) NotImplemented() error {
	ctx.ResponseData.WriteHeader(501)
	return nil
}

// GetDraftContext provides the draft get action context.
type GetDraftContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DraftID int
}

// NewGetDraftContext parses the incoming request URL and body, performs validations and creates the
// context used by the draft controller get action.
func NewGetDraftContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetDraftContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetDraftContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDraftID := req.Params["draftID"]
	if len(paramDraftID) > 0 {
		rawDraftID := paramDraftID[0]
		if draftID, err2 := strconv.Atoi(rawDraftID); err2 == nil {
			rctx.DraftID = draftID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("draftID", rawDraftID, "integer"))
		}
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetDraftContext) OKFull(r *ComJossemargtSaoDraftFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.draft+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetDraftContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetDraftContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowDraftContext provides the draft show action context.
type ShowDraftContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contest     int
	ContestSlug string
	Page        int
	PageSize    int
	Sort        string
	Task        int
	TaskSlug    string
	User        int
}

// NewShowDraftContext parses the incoming request URL and body, performs validations and creates the
// context used by the draft controller show action.
func NewShowDraftContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowDraftContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowDraftContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContest := req.Params["contest"]
	if len(paramContest) == 0 {
		rctx.Contest = 0
	} else {
		rawContest := paramContest[0]
		if contest, err2 := strconv.Atoi(rawContest); err2 == nil {
			rctx.Contest = contest
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contest", rawContest, "integer"))
		}
	}
	paramContestSlug := req.Params["contest_slug"]
	if len(paramContestSlug) == 0 {
		rctx.ContestSlug = ""
	} else {
		rawContestSlug := paramContestSlug[0]
		rctx.ContestSlug = rawContestSlug
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 10
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	paramTask := req.Params["task"]
	if len(paramTask) == 0 {
		rctx.Task = 0
	} else {
		rawTask := paramTask[0]
		if task, err2 := strconv.Atoi(rawTask); err2 == nil {
			rctx.Task = task
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("task", rawTask, "integer"))
		}
	}
	paramTaskSlug := req.Params["task_slug"]
	if len(paramTaskSlug) == 0 {
		rctx.TaskSlug = ""
	} else {
		rawTaskSlug := paramTaskSlug[0]
		rctx.TaskSlug = rawTaskSlug
	}
	paramUser := req.Params["user"]
	if len(paramUser) == 0 {
		rctx.User = 0
	} else {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			rctx.User = user
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowDraftContext) OK(r ComJossemargtSaoDraftCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.draft+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoDraftCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowDraftContext) OKFull(r ComJossemargtSaoDraftFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.draft+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoDraftFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowDraftContext) OKLink(r ComJossemargtSaoDraftLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.draft+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoDraftLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowDraftContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// GetDraftresultContext provides the draftresult get action context.
type GetDraftresultContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ResultID string
}

// NewGetDraftresultContext parses the incoming request URL and body, performs validations and creates the
// context used by the draftresult controller get action.
func NewGetDraftresultContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetDraftresultContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetDraftresultContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramResultID := req.Params["resultID"]
	if len(paramResultID) > 0 {
		rawResultID := paramResultID[0]
		rctx.ResultID = rawResultID
		if ok := goa.ValidatePattern(`\d+-\d+`, rctx.ResultID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`resultID`, rctx.ResultID, `\d+-\d+`))
		}
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetDraftresultContext) OKFull(r *ComJossemargtSaoDraftResultFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.draft-result+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetDraftresultContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetDraftresultContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowDraftresultContext provides the draftresult show action context.
type ShowDraftresultContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contest     int
	ContestSlug string
	Entry       int
	Page        int
	PageSize    int
	Sort        string
	Task        int
	TaskSlug    string
	User        int
}

// NewShowDraftresultContext parses the incoming request URL and body, performs validations and creates the
// context used by the draftresult controller show action.
func NewShowDraftresultContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowDraftresultContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowDraftresultContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContest := req.Params["contest"]
	if len(paramContest) == 0 {
		rctx.Contest = 0
	} else {
		rawContest := paramContest[0]
		if contest, err2 := strconv.Atoi(rawContest); err2 == nil {
			rctx.Contest = contest
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contest", rawContest, "integer"))
		}
		if rctx.Contest < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`contest`, rctx.Contest, 0, true))
		}
	}
	paramContestSlug := req.Params["contest_slug"]
	if len(paramContestSlug) == 0 {
		rctx.ContestSlug = ""
	} else {
		rawContestSlug := paramContestSlug[0]
		rctx.ContestSlug = rawContestSlug
	}
	paramEntry := req.Params["entry"]
	if len(paramEntry) == 0 {
		rctx.Entry = 0
	} else {
		rawEntry := paramEntry[0]
		if entry, err2 := strconv.Atoi(rawEntry); err2 == nil {
			rctx.Entry = entry
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("entry", rawEntry, "integer"))
		}
		if rctx.Entry < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`entry`, rctx.Entry, 0, true))
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 10
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	paramTask := req.Params["task"]
	if len(paramTask) == 0 {
		rctx.Task = 0
	} else {
		rawTask := paramTask[0]
		if task, err2 := strconv.Atoi(rawTask); err2 == nil {
			rctx.Task = task
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("task", rawTask, "integer"))
		}
		if rctx.Task < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`task`, rctx.Task, 0, true))
		}
	}
	paramTaskSlug := req.Params["task_slug"]
	if len(paramTaskSlug) == 0 {
		rctx.TaskSlug = ""
	} else {
		rawTaskSlug := paramTaskSlug[0]
		rctx.TaskSlug = rawTaskSlug
	}
	paramUser := req.Params["user"]
	if len(paramUser) == 0 {
		rctx.User = 0
	} else {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			rctx.User = user
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
		if rctx.User < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user`, rctx.User, 0, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowDraftresultContext) OK(r ComJossemargtSaoDraftResultCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.draft-result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoDraftResultCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowDraftresultContext) OKFull(r ComJossemargtSaoDraftResultFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.draft-result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoDraftResultFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowDraftresultContext) OKLink(r ComJossemargtSaoDraftResultLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.draft-result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoDraftResultLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowDraftresultContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// GetEntryContext provides the entry get action context.
type GetEntryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EntryID int
}

// NewGetEntryContext parses the incoming request URL and body, performs validations and creates the
// context used by the entry controller get action.
func NewGetEntryContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetEntryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetEntryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEntryID := req.Params["entryID"]
	if len(paramEntryID) > 0 {
		rawEntryID := paramEntryID[0]
		if entryID, err2 := strconv.Atoi(rawEntryID); err2 == nil {
			rctx.EntryID = entryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("entryID", rawEntryID, "integer"))
		}
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetEntryContext) OKFull(r *ComJossemargtSaoEntryFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetEntryContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetEntryContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowEntryContext provides the entry show action context.
type ShowEntryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contest     int
	ContestSlug string
	Page        int
	PageSize    int
	Sort        string
	Task        int
	TaskSlug    string
	User        int
}

// NewShowEntryContext parses the incoming request URL and body, performs validations and creates the
// context used by the entry controller show action.
func NewShowEntryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowEntryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowEntryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContest := req.Params["contest"]
	if len(paramContest) == 0 {
		rctx.Contest = 0
	} else {
		rawContest := paramContest[0]
		if contest, err2 := strconv.Atoi(rawContest); err2 == nil {
			rctx.Contest = contest
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contest", rawContest, "integer"))
		}
	}
	paramContestSlug := req.Params["contest_slug"]
	if len(paramContestSlug) == 0 {
		rctx.ContestSlug = ""
	} else {
		rawContestSlug := paramContestSlug[0]
		rctx.ContestSlug = rawContestSlug
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 10
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	paramTask := req.Params["task"]
	if len(paramTask) == 0 {
		rctx.Task = 0
	} else {
		rawTask := paramTask[0]
		if task, err2 := strconv.Atoi(rawTask); err2 == nil {
			rctx.Task = task
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("task", rawTask, "integer"))
		}
	}
	paramTaskSlug := req.Params["task_slug"]
	if len(paramTaskSlug) == 0 {
		rctx.TaskSlug = ""
	} else {
		rawTaskSlug := paramTaskSlug[0]
		rctx.TaskSlug = rawTaskSlug
	}
	paramUser := req.Params["user"]
	if len(paramUser) == 0 {
		rctx.User = 0
	} else {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			rctx.User = user
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowEntryContext) OK(r ComJossemargtSaoEntryCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoEntryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowEntryContext) OKFull(r ComJossemargtSaoEntryFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoEntryFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowEntryContext) OKLink(r ComJossemargtSaoEntryLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.entry+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoEntryLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowEntryContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// GetResultContext provides the result get action context.
type GetResultContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ResultID string
}

// NewGetResultContext parses the incoming request URL and body, performs validations and creates the
// context used by the result controller get action.
func NewGetResultContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetResultContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetResultContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramResultID := req.Params["resultID"]
	if len(paramResultID) > 0 {
		rawResultID := paramResultID[0]
		rctx.ResultID = rawResultID
		if ok := goa.ValidatePattern(`\d+-\d+`, rctx.ResultID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`resultID`, rctx.ResultID, `\d+-\d+`))
		}
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetResultContext) OKFull(r *ComJossemargtSaoResultFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetResultContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetResultContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowResultContext provides the result show action context.
type ShowResultContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contest     int
	ContestSlug string
	Entry       int
	Max         bool
	Page        int
	PageSize    int
	Sort        string
	Task        int
	TaskSlug    string
	User        int
	View        string
}

// NewShowResultContext parses the incoming request URL and body, performs validations and creates the
// context used by the result controller show action.
func NewShowResultContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowResultContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowResultContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContest := req.Params["contest"]
	if len(paramContest) == 0 {
		rctx.Contest = 0
	} else {
		rawContest := paramContest[0]
		if contest, err2 := strconv.Atoi(rawContest); err2 == nil {
			rctx.Contest = contest
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contest", rawContest, "integer"))
		}
	}
	paramContestSlug := req.Params["contest_slug"]
	if len(paramContestSlug) == 0 {
		rctx.ContestSlug = ""
	} else {
		rawContestSlug := paramContestSlug[0]
		rctx.ContestSlug = rawContestSlug
	}
	paramEntry := req.Params["entry"]
	if len(paramEntry) == 0 {
		rctx.Entry = 0
	} else {
		rawEntry := paramEntry[0]
		if entry, err2 := strconv.Atoi(rawEntry); err2 == nil {
			rctx.Entry = entry
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("entry", rawEntry, "integer"))
		}
	}
	paramMax := req.Params["max"]
	if len(paramMax) == 0 {
		rctx.Max = false
	} else {
		rawMax := paramMax[0]
		if max, err2 := strconv.ParseBool(rawMax); err2 == nil {
			rctx.Max = max
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("max", rawMax, "boolean"))
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	paramPageSize := req.Params["page_size"]
	if len(paramPageSize) == 0 {
		rctx.PageSize = 10
	} else {
		rawPageSize := paramPageSize[0]
		if pageSize, err2 := strconv.Atoi(rawPageSize); err2 == nil {
			rctx.PageSize = pageSize
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page_size", rawPageSize, "integer"))
		}
		if rctx.PageSize < 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page_size`, rctx.PageSize, 5, true))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	paramTask := req.Params["task"]
	if len(paramTask) == 0 {
		rctx.Task = 0
	} else {
		rawTask := paramTask[0]
		if task, err2 := strconv.Atoi(rawTask); err2 == nil {
			rctx.Task = task
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("task", rawTask, "integer"))
		}
	}
	paramTaskSlug := req.Params["task_slug"]
	if len(paramTaskSlug) == 0 {
		rctx.TaskSlug = ""
	} else {
		rawTaskSlug := paramTaskSlug[0]
		rctx.TaskSlug = rawTaskSlug
	}
	paramUser := req.Params["user"]
	if len(paramUser) == 0 {
		rctx.User = 0
	} else {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			rctx.User = user
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
	}
	paramView := req.Params["view"]
	if len(paramView) == 0 {
		rctx.View = "default"
	} else {
		rawView := paramView[0]
		rctx.View = rawView
		if !(rctx.View == "default" || rctx.View == "score") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`view`, rctx.View, []interface{}{"default", "score"}))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowResultContext) OK(r ComJossemargtSaoResultCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoResultCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowResultContext) OKFull(r ComJossemargtSaoResultFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoResultFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowResultContext) OKLink(r ComJossemargtSaoResultLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.com.jossemargt.sao.result+json; type=collection")
	}
	if r == nil {
		r = ComJossemargtSaoResultLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowResultContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}
