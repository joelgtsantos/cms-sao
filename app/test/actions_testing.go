// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "SAO": actions TestHelpers
//
// Command:
// $ go generate

package test

import (
	"bytes"
	"context"
	"fmt"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/goatest"
	"github.com/jossemargt/cms-sao/app"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"net/url"
	"strconv"
)

// SubmitEntryActionsBadRequest runs the method SubmitEntry of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func SubmitEntryActionsBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ActionsController, payload *app.EntryPayload) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		return nil, e
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/sao/v1/submit-entry"),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ActionsTest"), rw, req, prms)
	submitEntryCtx, __err := app.NewSubmitEntryActionsContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		return nil, _e
	}
	submitEntryCtx.Payload = payload

	// Perform action
	__err = ctrl.SubmitEntry(submitEntryCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(error)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// SubmitEntryActionsCreated runs the method SubmitEntry of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func SubmitEntryActionsCreated(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ActionsController, payload *app.EntryPayload) (http.ResponseWriter, *app.ComJossemargtSaoEntrySubmitTransaction) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil, nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/sao/v1/submit-entry"),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ActionsTest"), rw, req, prms)
	submitEntryCtx, __err := app.NewSubmitEntryActionsContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil, nil
	}
	submitEntryCtx.Payload = payload

	// Perform action
	__err = ctrl.SubmitEntry(submitEntryCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 201 {
		t.Errorf("invalid response status code: got %+v, expected 201", rw.Code)
	}
	var mt *app.ComJossemargtSaoEntrySubmitTransaction
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(*app.ComJossemargtSaoEntrySubmitTransaction)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ComJossemargtSaoEntrySubmitTransaction", resp, resp)
		}
		__err = mt.Validate()
		if __err != nil {
			t.Errorf("invalid response media type: %s", __err)
		}
	}

	// Return results
	return rw, mt
}

// SubmitEntryActionsCreatedFull runs the method SubmitEntry of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func SubmitEntryActionsCreatedFull(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ActionsController, payload *app.EntryPayload) (http.ResponseWriter, *app.ComJossemargtSaoEntrySubmitTransactionFull) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil, nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/sao/v1/submit-entry"),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ActionsTest"), rw, req, prms)
	submitEntryCtx, __err := app.NewSubmitEntryActionsContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil, nil
	}
	submitEntryCtx.Payload = payload

	// Perform action
	__err = ctrl.SubmitEntry(submitEntryCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 201 {
		t.Errorf("invalid response status code: got %+v, expected 201", rw.Code)
	}
	var mt *app.ComJossemargtSaoEntrySubmitTransactionFull
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(*app.ComJossemargtSaoEntrySubmitTransactionFull)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ComJossemargtSaoEntrySubmitTransactionFull", resp, resp)
		}
		__err = mt.Validate()
		if __err != nil {
			t.Errorf("invalid response media type: %s", __err)
		}
	}

	// Return results
	return rw, mt
}

// SubmitEntryActionsCreatedLink runs the method SubmitEntry of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func SubmitEntryActionsCreatedLink(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ActionsController, payload *app.EntryPayload) (http.ResponseWriter, *app.ComJossemargtSaoEntrySubmitTransactionLink) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil, nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/sao/v1/submit-entry"),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ActionsTest"), rw, req, prms)
	submitEntryCtx, __err := app.NewSubmitEntryActionsContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil, nil
	}
	submitEntryCtx.Payload = payload

	// Perform action
	__err = ctrl.SubmitEntry(submitEntryCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 201 {
		t.Errorf("invalid response status code: got %+v, expected 201", rw.Code)
	}
	var mt *app.ComJossemargtSaoEntrySubmitTransactionLink
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(*app.ComJossemargtSaoEntrySubmitTransactionLink)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ComJossemargtSaoEntrySubmitTransactionLink", resp, resp)
		}
		__err = mt.Validate()
		if __err != nil {
			t.Errorf("invalid response media type: %s", __err)
		}
	}

	// Return results
	return rw, mt
}

// SubmitEntryActionsNotImplemented runs the method SubmitEntry of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func SubmitEntryActionsNotImplemented(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ActionsController, payload *app.EntryPayload) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/sao/v1/submit-entry"),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ActionsTest"), rw, req, prms)
	submitEntryCtx, __err := app.NewSubmitEntryActionsContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil
	}
	submitEntryCtx.Payload = payload

	// Perform action
	__err = ctrl.SubmitEntry(submitEntryCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 501 {
		t.Errorf("invalid response status code: got %+v, expected 501", rw.Code)
	}

	// Return results
	return rw
}

// SubmitEntryDraftActionsBadRequest runs the method SubmitEntryDraft of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func SubmitEntryDraftActionsBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ActionsController, payload *app.EntryPayload) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		return nil, e
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/sao/v1/submit-draft"),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ActionsTest"), rw, req, prms)
	submitEntryDraftCtx, __err := app.NewSubmitEntryDraftActionsContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		return nil, _e
	}
	submitEntryDraftCtx.Payload = payload

	// Perform action
	__err = ctrl.SubmitEntryDraft(submitEntryDraftCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(error)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// SubmitEntryDraftActionsCreated runs the method SubmitEntryDraft of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func SubmitEntryDraftActionsCreated(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ActionsController, payload *app.EntryPayload) (http.ResponseWriter, *app.ComJossemargtSaoDraftSubmitTransaction) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil, nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/sao/v1/submit-draft"),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ActionsTest"), rw, req, prms)
	submitEntryDraftCtx, __err := app.NewSubmitEntryDraftActionsContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil, nil
	}
	submitEntryDraftCtx.Payload = payload

	// Perform action
	__err = ctrl.SubmitEntryDraft(submitEntryDraftCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 201 {
		t.Errorf("invalid response status code: got %+v, expected 201", rw.Code)
	}
	var mt *app.ComJossemargtSaoDraftSubmitTransaction
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(*app.ComJossemargtSaoDraftSubmitTransaction)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ComJossemargtSaoDraftSubmitTransaction", resp, resp)
		}
		__err = mt.Validate()
		if __err != nil {
			t.Errorf("invalid response media type: %s", __err)
		}
	}

	// Return results
	return rw, mt
}

// SubmitEntryDraftActionsCreatedFull runs the method SubmitEntryDraft of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func SubmitEntryDraftActionsCreatedFull(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ActionsController, payload *app.EntryPayload) (http.ResponseWriter, *app.ComJossemargtSaoDraftSubmitTransactionFull) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil, nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/sao/v1/submit-draft"),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ActionsTest"), rw, req, prms)
	submitEntryDraftCtx, __err := app.NewSubmitEntryDraftActionsContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil, nil
	}
	submitEntryDraftCtx.Payload = payload

	// Perform action
	__err = ctrl.SubmitEntryDraft(submitEntryDraftCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 201 {
		t.Errorf("invalid response status code: got %+v, expected 201", rw.Code)
	}
	var mt *app.ComJossemargtSaoDraftSubmitTransactionFull
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(*app.ComJossemargtSaoDraftSubmitTransactionFull)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ComJossemargtSaoDraftSubmitTransactionFull", resp, resp)
		}
		__err = mt.Validate()
		if __err != nil {
			t.Errorf("invalid response media type: %s", __err)
		}
	}

	// Return results
	return rw, mt
}

// SubmitEntryDraftActionsCreatedLink runs the method SubmitEntryDraft of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func SubmitEntryDraftActionsCreatedLink(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ActionsController, payload *app.EntryPayload) (http.ResponseWriter, *app.ComJossemargtSaoDraftSubmitTransactionLink) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil, nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/sao/v1/submit-draft"),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ActionsTest"), rw, req, prms)
	submitEntryDraftCtx, __err := app.NewSubmitEntryDraftActionsContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil, nil
	}
	submitEntryDraftCtx.Payload = payload

	// Perform action
	__err = ctrl.SubmitEntryDraft(submitEntryDraftCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 201 {
		t.Errorf("invalid response status code: got %+v, expected 201", rw.Code)
	}
	var mt *app.ComJossemargtSaoDraftSubmitTransactionLink
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(*app.ComJossemargtSaoDraftSubmitTransactionLink)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ComJossemargtSaoDraftSubmitTransactionLink", resp, resp)
		}
		__err = mt.Validate()
		if __err != nil {
			t.Errorf("invalid response media type: %s", __err)
		}
	}

	// Return results
	return rw, mt
}

// SubmitEntryDraftActionsNotImplemented runs the method SubmitEntryDraft of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func SubmitEntryDraftActionsNotImplemented(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ActionsController, payload *app.EntryPayload) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/sao/v1/submit-draft"),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ActionsTest"), rw, req, prms)
	submitEntryDraftCtx, __err := app.NewSubmitEntryDraftActionsContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil
	}
	submitEntryDraftCtx.Payload = payload

	// Perform action
	__err = ctrl.SubmitEntryDraft(submitEntryDraftCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 501 {
		t.Errorf("invalid response status code: got %+v, expected 501", rw.Code)
	}

	// Return results
	return rw
}

// SummarizeScoreActionsBadRequest runs the method SummarizeScore of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func SummarizeScoreActionsBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ActionsController, contest *int, groupBy string, page int, pageSize int, sort string, task *int, user *int) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contest != nil {
		sliceVal := []string{strconv.Itoa(*contest)}
		query["contest"] = sliceVal
	}
	{
		sliceVal := []string{groupBy}
		query["groupBy"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(page)}
		query["page"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(pageSize)}
		query["page_size"] = sliceVal
	}
	{
		sliceVal := []string{sort}
		query["sort"] = sliceVal
	}
	if task != nil {
		sliceVal := []string{strconv.Itoa(*task)}
		query["task"] = sliceVal
	}
	if user != nil {
		sliceVal := []string{strconv.Itoa(*user)}
		query["user"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/sao/v1/summarize-score"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if contest != nil {
		sliceVal := []string{strconv.Itoa(*contest)}
		prms["contest"] = sliceVal
	}
	{
		sliceVal := []string{groupBy}
		prms["groupBy"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(page)}
		prms["page"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(pageSize)}
		prms["page_size"] = sliceVal
	}
	{
		sliceVal := []string{sort}
		prms["sort"] = sliceVal
	}
	if task != nil {
		sliceVal := []string{strconv.Itoa(*task)}
		prms["task"] = sliceVal
	}
	if user != nil {
		sliceVal := []string{strconv.Itoa(*user)}
		prms["user"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ActionsTest"), rw, req, prms)
	summarizeScoreCtx, _err := app.NewSummarizeScoreActionsContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		return nil, e
	}

	// Perform action
	_err = ctrl.SummarizeScore(summarizeScoreCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(error)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// SummarizeScoreActionsNotFound runs the method SummarizeScore of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func SummarizeScoreActionsNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ActionsController, contest *int, groupBy string, page int, pageSize int, sort string, task *int, user *int) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contest != nil {
		sliceVal := []string{strconv.Itoa(*contest)}
		query["contest"] = sliceVal
	}
	{
		sliceVal := []string{groupBy}
		query["groupBy"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(page)}
		query["page"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(pageSize)}
		query["page_size"] = sliceVal
	}
	{
		sliceVal := []string{sort}
		query["sort"] = sliceVal
	}
	if task != nil {
		sliceVal := []string{strconv.Itoa(*task)}
		query["task"] = sliceVal
	}
	if user != nil {
		sliceVal := []string{strconv.Itoa(*user)}
		query["user"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/sao/v1/summarize-score"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if contest != nil {
		sliceVal := []string{strconv.Itoa(*contest)}
		prms["contest"] = sliceVal
	}
	{
		sliceVal := []string{groupBy}
		prms["groupBy"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(page)}
		prms["page"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(pageSize)}
		prms["page_size"] = sliceVal
	}
	{
		sliceVal := []string{sort}
		prms["sort"] = sliceVal
	}
	if task != nil {
		sliceVal := []string{strconv.Itoa(*task)}
		prms["task"] = sliceVal
	}
	if user != nil {
		sliceVal := []string{strconv.Itoa(*user)}
		prms["user"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ActionsTest"), rw, req, prms)
	summarizeScoreCtx, _err := app.NewSummarizeScoreActionsContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.SummarizeScore(summarizeScoreCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// SummarizeScoreActionsNotImplemented runs the method SummarizeScore of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func SummarizeScoreActionsNotImplemented(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ActionsController, contest *int, groupBy string, page int, pageSize int, sort string, task *int, user *int) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contest != nil {
		sliceVal := []string{strconv.Itoa(*contest)}
		query["contest"] = sliceVal
	}
	{
		sliceVal := []string{groupBy}
		query["groupBy"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(page)}
		query["page"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(pageSize)}
		query["page_size"] = sliceVal
	}
	{
		sliceVal := []string{sort}
		query["sort"] = sliceVal
	}
	if task != nil {
		sliceVal := []string{strconv.Itoa(*task)}
		query["task"] = sliceVal
	}
	if user != nil {
		sliceVal := []string{strconv.Itoa(*user)}
		query["user"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/sao/v1/summarize-score"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if contest != nil {
		sliceVal := []string{strconv.Itoa(*contest)}
		prms["contest"] = sliceVal
	}
	{
		sliceVal := []string{groupBy}
		prms["groupBy"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(page)}
		prms["page"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(pageSize)}
		prms["page_size"] = sliceVal
	}
	{
		sliceVal := []string{sort}
		prms["sort"] = sliceVal
	}
	if task != nil {
		sliceVal := []string{strconv.Itoa(*task)}
		prms["task"] = sliceVal
	}
	if user != nil {
		sliceVal := []string{strconv.Itoa(*user)}
		prms["user"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ActionsTest"), rw, req, prms)
	summarizeScoreCtx, _err := app.NewSummarizeScoreActionsContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.SummarizeScore(summarizeScoreCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 501 {
		t.Errorf("invalid response status code: got %+v, expected 501", rw.Code)
	}

	// Return results
	return rw
}

// SummarizeScoreActionsOK runs the method SummarizeScore of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func SummarizeScoreActionsOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ActionsController, contest *int, groupBy string, page int, pageSize int, sort string, task *int, user *int) (http.ResponseWriter, app.ComJossemargtSaoScoreSumCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if contest != nil {
		sliceVal := []string{strconv.Itoa(*contest)}
		query["contest"] = sliceVal
	}
	{
		sliceVal := []string{groupBy}
		query["groupBy"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(page)}
		query["page"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(pageSize)}
		query["page_size"] = sliceVal
	}
	{
		sliceVal := []string{sort}
		query["sort"] = sliceVal
	}
	if task != nil {
		sliceVal := []string{strconv.Itoa(*task)}
		query["task"] = sliceVal
	}
	if user != nil {
		sliceVal := []string{strconv.Itoa(*user)}
		query["user"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/sao/v1/summarize-score"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if contest != nil {
		sliceVal := []string{strconv.Itoa(*contest)}
		prms["contest"] = sliceVal
	}
	{
		sliceVal := []string{groupBy}
		prms["groupBy"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(page)}
		prms["page"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(pageSize)}
		prms["page_size"] = sliceVal
	}
	{
		sliceVal := []string{sort}
		prms["sort"] = sliceVal
	}
	if task != nil {
		sliceVal := []string{strconv.Itoa(*task)}
		prms["task"] = sliceVal
	}
	if user != nil {
		sliceVal := []string{strconv.Itoa(*user)}
		prms["user"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ActionsTest"), rw, req, prms)
	summarizeScoreCtx, _err := app.NewSummarizeScoreActionsContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.SummarizeScore(summarizeScoreCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.ComJossemargtSaoScoreSumCollection
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(app.ComJossemargtSaoScoreSumCollection)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ComJossemargtSaoScoreSumCollection", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}
